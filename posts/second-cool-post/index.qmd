---
title: "My Second Cool Post"
description: "R Code for Pharma 2"
author: "Erik Rodriguez"
date: "11/08/2023"
---

[Ivan Millanes](https://www.linkedin.com/in/ivan-millanes-a0b574155/?trk=pub-pbmap&originalSubdomain=ar) from the [R en Rosario](https://www.meetup.com/r-en-rosario/members/?op=leaders) recently talked to the R-Consortium. He shared the group’s vision to create an inclusive knowledge-sharing platform for a diverse R community in Rosario. In Argentina, the group welcomes participants and speakers at all experience levels. Ivan also uses R at work and builds Shiny applications for the pharmaceutical industry. 

![](https://www.r-consortium.org/wp-content/uploads/sites/13/2023/08/image.jpeg)

Ivan co-organizes R en Rosario and is one of the group’s founding members. He completed his Bachelor’s in Statistics at the National University of Rosario. Not to mention, Ivan has achieved multiple certifications in Machine Learning. Currently, he works as a R/Shiny developer at Appsilon. 


**_Please share your background and involvement with the RUGS group._**

  
My educational background is in Mathematics and Statistics. I first used R around six years ago during my studies and have since gained experience in R through different jobs. I have worked in various industries like marketing, healthcare, and insurance. I am currently working in the Pharmaceutical industry. 

![](https://www.r-consortium.org/wp-content/uploads/sites/13/2023/08/image-2.png)

_R en Rosario Founding Members_

We started the R en Rosario User Group a couple of years ago, Argentina’s first R User Group. Later, other cities also started their R Users Groups, e.g., [Buenos Aires](https://www.r-consortium.org/blog/2022/12/15/r-en-buenos-aires-in-2023-compiling-a-list-of-latin-american-r-packages). We hosted a few virtual meetings during the pandemic but stopped after a few months. Now that everything is returning to normal, we plan to resume our meetings. We would like to host speakers from different industries who use R for their work. A networking session would follow these talks. 


**_What industry are you currently in? How do you use R in your work?_**

I currently work in Pharma, where we develop [Shiny](https://shiny.posit.co/) applications using R.

The applications we develop have a similar workflow: we connect to SQL databases and produce some outputs the business needs in the form of PDFs or Word documents based on user choices for different parameters.

We use the [Rhino](https://cran.r-project.org/web/packages/rhino/index.html) package from [Appsilon](https://appsilon.com/) to develop the applications, as it provides a great framework for developing high-quality applications. We also use:

-   [R Markdown](https://rmarkdown.rstudio.com/) and [officer](https://cran.r-project.org/web/packages/officer/index.html) to generate PDF and Word reports from the app
-   [ggplot](https://ggplot2.tidyverse.org/) to create plots
-   [tidyverse](https://www.tidyverse.org/) packages (such as [dplyr](https://dplyr.tidyverse.org/)) to process data

One application we developed generates annual reports of different incidents in the laboratory. Before we developed the application, this process was manual and took time. With this app, they have a relatively simple interface where they can select the data they want to see in the report. They can download the reports and also get it sent to their system.

**_Why do industry professionals come to your user group? What is the benefit for attending?_**

People from a diverse range of backgrounds attend our meetups. Some government officials use R to analyze traffic data for public services. Some people from the farming industry use R to interpret satellite images to understand crops. 

Even though statisticians founded this group, its purpose is to provide a platform for people from various backgrounds to learn R and use it for their work. We usually have around 20-30 people attending our meetups, and different companies provide space to host our meetups.

Networking is an important part of our meetups, allowing members to learn more about each other. 

We also do not have any limit on the topics for these talks, and anyone who feels like sharing their work in R with the audience can give a talk. So everyone, at any experience level, is more than welcome to give a speech. We are not experts and are not looking for only experts to give talks. The idea is for people from different backgrounds to come together and learn from each other. 

![](https://www.r-consortium.org/wp-content/uploads/sites/13/2023/08/image-1.png)

_R en Rosario Meeting Hosted by a Company_


``` yaml
---
title: "An Example Using the Tufte Style"
author: "John Smith"
format:
  html:
    grid:
      margin-width: 350px         # <1>
  pdf: default
reference-location: margin        # <2>
citation-location: margin         # <2>
---
```

Cool.


# Figures

## Margin Figures

Images and graphics play an integral role in Tufte's work. To place figures in the margin you can use the **Quarto** chunk option `column: margin`. For example:

```{r}
#| label: fig-margin
#| fig-cap: "MPG vs horsepower, colored by transmission."
#| column: margin
#| message: false
library(ggplot2)
mtcars2 <- mtcars
mtcars2$am <- factor(
  mtcars$am, labels = c('automatic', 'manual')
)
ggplot(mtcars2, aes(hp, mpg, color = am)) +
  geom_point() + geom_smooth() +
  theme(legend.position = 'bottom')
```

Note the use of the `fig-cap` chunk option to provide a figure caption. You can adjust the proportions of figures using the `fig-width` and `fig-height` chunk options. These are specified in inches, and will be automatically scaled down to fit within the handout margin.

## Arbitrary Margin Content

You can include anything in the margin by places the class `.column-margin` on the element. See an example on the right about the first fundamental theorem of calculus.

::: column-margin
We know from *the first fundamental theorem of calculus* that for $x$ in $[a, b]$:

$$\frac{d}{dx}\left( \int_{a}^{x} f(u)\,du\right)=f(x).$$
:::


You can also add interactive plots. For example:

```{r}
#| label: fig-temperatures-atTop
#| fig-cap: "New Haven Temperatures"

library(dygraphs)
dygraph(nhtemp) %>% 
  dyRangeSelector(dateWindow = c("1920-01-01", "1960-01-01"))
```


## Full Width Figures

You can arrange for figures to span across the entire page by using the chunk option `fig-column: page-right`.

```{r}
#| label: fig-fullwidth
#| fig-cap: "A full width figure."
#| fig-width: 11
#| fig-height: 3
#| fig-column: page-right
#| warning: false
ggplot(diamonds, aes(carat, price)) + geom_smooth() +
  facet_grid(~ cut)
```

Other chunk options related to figures can still be used, such as `fig-width`, `fig-cap`, and so on. For full width figures, usually `fig-width` is large and `fig-height` is small. In the above example, the plot size is $11 \times 3$.

## Arbitrary Full Width Content

Any content can span to the full width of the page, simply place the element in a `div` and add the class `column-page-right`. For example, the following code will display its contents as full width.

``` md
::: {.fullwidth}
Any _full width_ content here.
:::
```

Below is an example:

::: column-page-right
*R is free software and comes with ABSOLUTELY NO WARRANTY.* You are welcome to redistribute it under the terms of the GNU General Public License versions 2 or 3. For more information about these matters see <https://www.gnu.org/licenses/>.
:::

## Main Column Figures

Besides margin and full width figures, you can of course also include figures constrained to the main column. This is the default type of figures in the LaTeX/HTML output.

```{r}
#| label: fig-main
#| fig-cap: "A figure in the main column."
ggplot(diamonds, aes(cut, price)) + geom_boxplot()
```

## Margin Captions

When you include a figure constrained to the main column, you can choose to place the figure's caption in the margin by using the `cap-location` chunk option. For example:

```{r}
#| label: fig-main-margin-cap
#| fig-cap: "A figure with a longer caption. The figure appears in the main column, but the caption is placed in the margin. Captions can even contain elements like a citation such as @xie2018."
#| cap-location: margin
ggplot(diamonds, aes(cut, price)) + geom_boxplot()
```

# Sidenotes

One of the most prominent and distinctive features of this style is the extensive use of sidenotes. There is a wide margin to provide ample room for sidenotes and small figures. Any use of a footnote will automatically be converted to a sidenote.

[This is a span that has the class `column-margin` which places it in the margin without the sidenote mark.]{.column-margin} If you'd like to place ancillary information in the margin without the sidenote mark (the superscript number), you can use apply the `column-margin` class to the element.

# References

References can be displayed as margin notes for HTML output. For example, we can cite R here [@R-base].

::: {.callout-note appearance="simple"}
This feature depends upon `link-citations` to locate and place references in the margin. This is enabled by default, but if you disable `link-citations` then references in the HTML output will be placed at the end of the output document as they normally are.
:::

# Tables

You can use the `kable()` function from the **knitr** package to format tables that integrate well with the rest of the Tufte handout style. The table captions are placed in the margin like figures in the HTML output.

```{r}
#| tbl-cap-location: margin
knitr::kable(
  mtcars[1:6, 1:6], caption = 'A subset of mtcars.'
)
```

# Responsiveness

The HTML page layout is responsive- as the page width shrinks, elements will automatically adjust their position. Elements that appear in the margins will move inline with the content and elements that span the body and margin will automatically span only the body.

# More Examples

The rest of this document consists of a few test cases to make sure everything still works well in slightly more complicated scenarios. First we generate two plots in one figure environment with the chunk option `fig-show: hold`:

```{r}
#| label: fig-two-together
#| fig-cap: "Two plots in one figure environment."
#| fig-show: hold
#| warning: false
#| cap-location: margin
p <- ggplot(mtcars2, aes(hp, mpg, color = am)) +
  geom_point()
p
p + geom_smooth()
```

Then two plots in separate figure environments (the code is identical to the previous code chunk, but the chunk option is the default `fig-show: asis` now):

```{r fig-two-separate, ref.label='fig-two-together', fig.cap=sprintf("Two plots in separate figure environments (the %s plot).", c("first", "second")), message=FALSE}
#| cap-location: margin
```

You may have noticed that the two figures have different captions, and that is because we used a character vector of length 2 for the chunk option `fig.cap` (something like `fig.cap = c('first plot', 'second plot')`).

::: callout-tip
## Using R within Chunk Options

If you wish to use raw R expressions as part of the chunk options (like above), then you need to define those in the `tag=value` format within the curly brackets `{r label, tag=value}` instead of the `tag: value` YAML syntax on a new line starting with the hashpipe `#|`. The former approach is documented on [knitr's website](https://yihui.org/knitr/options/) while the latter is explained in [Quarto's documentation](https://quarto.org/docs/reference/cells/cells-knitr.html).
:::

Next we show multiple plots in margin figures. Similarly, two plots in the same figure environment in the margin:

```{r}
#| label: fig-margin-together
#| fig-cap: "Two plots in one figure environment in the margin."
#| fig-width: 3.5
#| fig-height: 2
#| fig-show: hold
#| column: margin
#| warning: false
#| echo: false
p
p + geom_smooth(method = 'lm')
```

Then two plots from the same code chunk placed in different figure environments:

```{r}
#| echo: false
knitr::kable(head(iris[,c(1,2,3,4)], 13))
```

```{r}
#| label: fig-margin-separate-a
#| fig-cap: "Two plots in separate figure environments in the margin"
#| fig-width: 3.5
#| fig-height: 2
#| column: margin
#| warning: false
#| echo: false
p
p + geom_smooth(method = 'lm')
```

```{r}
#| echo: false
knitr::kable(head(iris[,c(1,2,3,4)], 11))
```

We blended some tables in the above code chunk only as *placeholders* to make sure there is enough vertical space among the margin figures, otherwise they will be stacked tightly together. For a practical document, you should not insert too many margin figures consecutively and make the margin crowded.

You do not have to assign captions to figures. We show three figures with no captions below in the margin, in the main column, and in full width, respectively.

```{r}
#| fig-width: 3.5
#| fig-height: 2
#| column: margin
# a boxplot of weight vs transmission; this figure
# will be placed in the margin
ggplot(mtcars2, aes(am, wt)) + geom_boxplot() +
  coord_flip()
```

```{r}
#| warning: false
# a figure in the main column
p <- ggplot(mtcars, aes(wt, hp)) + geom_point()
p
```

```{r}
#| fig-width: 11
#| fig-height: 4
#| column: page-right
#| warning: false
# a fullwidth figure
p + geom_smooth(method = 'lm') + facet_grid(~ gear)
```

## Introduction

This a Quarto document. To learn more about Quarto see <https://quarto.org>.

Click the **Code** button in the header to see the full source code of this document.

Here we call the R `summary()` function---the function's output is included immediately below:

```{r}
summary(cars)
```

## Plot Output

You can also embed plots, for example:

```{r}
#| label: fig-pressure
#| fig-cap: "Pressure"
#| code-fold: true

library(ggplot2)
dat <- data.frame(cond = rep(c("A", "B"), each=10),
                  xvar = 1:20 + rnorm(20,sd=3),
                  yvar = 1:20 + rnorm(20,sd=3))

ggplot(dat, aes(x=xvar, y=yvar)) +
    geom_point(shape=1) + 
    geom_smooth() 
```

Note that the `code-fold: true` parameter was added to the code chunk to hide the code by default (click "Code" above the plot to see the code).

The use of the `label` and `fig-cap` options make this a cross-referenceable figure (see @fig-pressure).

## Interactivity

You can also add interactive plots. For example:

```{r}
#| label: fig-temperatures
#| fig-cap: "New Haven Temperatures"

library(dygraphs)
dygraph(nhtemp) %>% 
  dyRangeSelector(dateWindow = c("1920-01-01", "1960-01-01"))
```

## Tables

Use the `knitr::kable()` function to print tables as HTML:

```{r}
knitr::kable(head(ggplot2::diamonds))
```

## LaTeX Math

You can also include LaTeX math:

$$
P\left(A=2\middle|\frac{A^2}{B}>4\right)
$$